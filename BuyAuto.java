/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import javaswing.Stock;
import javaswing.TypeStock;
import static View.Login.username;
import static View.Login.username;
import javaswing.History;
import javaswing.Trader;
import javaswing.TreeTrader;


public class BuyAuto extends javax.swing.JFrame {

    /**
     * Creates new form BuyAuto
     */
    public BuyAuto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_BackHome = new java.awt.Button();
        label1 = new java.awt.Label();
        txt_NameStock = new java.awt.TextField();
        label2 = new java.awt.Label();
        txt_Price = new java.awt.TextField();
        label3 = new java.awt.Label();
        txt_Quantity = new java.awt.TextField();
        button1 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_BackHome.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_BackHome.setLabel("Back Home");
        btn_BackHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackHomeActionPerformed(evt);
            }
        });

        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("NameStock");

        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("Price");

        label3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label3.setText("Quantity");

        button1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button1.setLabel("Buy");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btn_BackHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_Quantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_Price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_NameStock, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btn_BackHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_NameStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        this.Check();
        
        
    }//GEN-LAST:event_button1ActionPerformed

    private void btn_BackHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackHomeActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Home().setVisible(true);
    }//GEN-LAST:event_btn_BackHomeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuyAuto().setVisible(true);
            }
        });
    }
    
    private boolean Check(){
        Stock t = new Stock();
        float p = Float.parseFloat(txt_Price.getText());
        int q = Integer.parseInt(txt_Quantity.getText());
        float m = new TreeTrader().GetMoney(username);
        if(new TypeStock().CheckNameStock(txt_NameStock.getText())){
            if(p > 0 && q > 0 && m > p*q + this.getMoneyListBuyUser(username)){
                t.setName(txt_NameStock.getText());
                t.setPrice(p);
                t.setQuantity(q);
                t.setUsername(username);
                new Stock().AddListBuySQL(t);
                javax.swing.JOptionPane.showMessageDialog(rootPane, "Buy Auto"); 
                txt_NameStock.setText("");
                txt_Price.setText("");
                txt_Quantity.setText("");
                return true;
            }else{
                javax.swing.JOptionPane.showMessageDialog(rootPane, "Price or Quantity Invalid"); 
            }
        }else{
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Name Stock Invalid");
        }
        return false;
    }
    
    public void ConditionBuyAuto(){
        
        HashMap<String,PriorityQueue<Stock>> mapSell = new Stock().GetSQLToHashMapListSell();
        HashMap<String,PriorityQueue<Stock>> mapBuy = new Stock().GetSQLToHashMapListBuy();

        PriorityQueue<Stock> queueSell = new PriorityQueue<>(new CompareIncresePrice());
        PriorityQueue<Stock> queueBuy = new PriorityQueue<>(new CompareReducePrice());
        
        Set<String> keySell = mapSell.keySet();
        Set<String> keybuy = mapBuy.keySet();
        
        TreeSet<String> set = new TreeSet<>();
        set = new TypeStock().TreeSetSQLTypeStock();

        for(String nameStock : set){
            queueSell = mapSell.get(nameStock);
            queueBuy = mapBuy.get(nameStock);
            
            while(queueSell.size() > 0 && queueBuy.size() > 0){
                // stock is selling
                Stock s1 =new Stock();
                // stock need to buy  
                Stock s2 = new Stock();
                
                s1 = queueSell.peek();
                s2 = queueBuy.peek();
                
                if(this.ConditionMoney(s1, s2)){
                    History h = new History();
                    h.setNameStock(s1.getName());
                    h.setPrice(s1.getPrice());   
                    h.setSeller(s1.getUsername());
                    h.setUsername(s2.getUsername());
                    if(s1.getQuantity() > s2.getQuantity()){
                        h.setQuantity(s2.getQuantity());
                        queueBuy.poll();
                    }else if(s1.getQuantity() == s2.getQuantity()){
                        queueSell.poll();
                        queueBuy.poll();
                        h.setQuantity(s2.getQuantity());
                    }else{
                        queueSell.poll();
                        h.setQuantity(s1.getQuantity());
                    }
                    new History().AddMailBoxSQL(h);
                }else{
                    queueSell.poll();
                } 
            }
        }
    }
    private float getMoneyListBuyUser(String user){
        float m = 0 ;
        PriorityQueue<Stock> q = new Stock().GetPriorityQueueListBuy();
        while(q.size() > 0 ){
            Stock st = q.poll();
            if(st.getUsername().equalsIgnoreCase(user)){
                m += st.getPrice()*st.getQuantity();
            }
        }
        return m;
    }
    
    private boolean ConditionMoney(Stock s1, Stock s2){
        // 1. gia mua >= gia ban khop lenh
                // 1.1 mua du - > remove ca 2
                // 1.2 mua it hon -> remove mua; tru ben ban
                    // 1.3 mua nhieu hon -> kiem tra nguoi ban tiep theo, quay tro lai buoc dau
                // 2. gia mua < gia ban khong thuc hien
        // price buy than price sell
        if(s2.getPrice() >= s1.getPrice()){
            // quantity buy than quantity sell 
            // s1 stock in list sell
            // s2 stock in list buy
            if(s2.getQuantity() > s1.getQuantity()){
                // remove s1 out list sell
                // update list buy (s2.q-s1.q)
                Stock st = new Stock();
                st.setName(s2.getName());
                st.setPrice(s2.getPrice());
                st.setQuantity(s1.getQuantity());
                st.setUsername(s2.getUsername());
                
                this.DeleteOutListSell(s1);
                this.UpdateListBuy(st);
                
                //update stock user s1(seller)
                // update money user s1(seller)
                this.UpdateMoneySeller(s1);
                
                //update stock s2(buyer)
                // update money s2(buyer)
                st.setPrice(s1.getPrice());
                
                if(new Stock().CheckStock(st)){
                    this.UpdateStock(st);
                }else{
                    new Stock().AddStockSQL(st);
                }
                this.UpdateMoneyBuyer(st);
            }else if(s2.getQuantity() == s1.getQuantity()){
                Stock st = new Stock();
                st.setName(s2.getName());
                st.setPrice(s1.getPrice());
                st.setQuantity(s2.getQuantity());
                st.setUsername(s2.getUsername());
                
                //remove s1 out list sell
                //remove s2 out list buy 
                this.DeleteOutListSell(s1);
                this.DeleteOutListBuy(s2);
                //update Stock s1 (seller), update money seller
                this.UpdateMoneySeller(s1);

                //update stock s2 (buyer), update money buyer
                this.UpdateMoneyBuyer(st);
                if(new Stock().CheckStock(st)){
                    this.UpdateStock(st);
                }else{
                    new Stock().AddStockSQL(st);
                }
            }else{// s2.quantity < s1.quantity :  quantity buy less than quantity sell 
                // remove s2 out list buy
                // update list sell (s1.q-s2.q)
                Stock st = new Stock();
                st.setName(s1.getName());
                st.setPrice(s1.getPrice());
                st.setQuantity(s2.getQuantity());
                st.setUsername(s1.getUsername());
                
                this.DeleteOutListBuy(s2);
                this.UpdateListSell(st);
                
                //update stock user s1(seller)
                // update money user s1(seller)
                this.UpdateMoneySeller(st);
                
                //update stock s2(buyer)
                // update money s2(buyer)
                if(new Stock().CheckStock(s2)){
                    this.UpdateStock(s2);
                }else{
                    new Stock().AddStockSQL(s2);
                }
                s2.setPrice(s1.getPrice());
                this.UpdateMoneyBuyer(s2);
            }
            return true;
        }else{// price buy less price sell
            return false;
        }
    }
    private void DeleteOutListSell(Stock s){
        new Stock().DeleteListSellSQL(s); 
    }
    private void DeleteOutListBuy(Stock s){
        new Stock().DeleteListBuySQL(s); 
    }
    private void UpdateListSell(Stock s){
        new Stock().UpdateListSellSQL1(s); 
    }
    private void UpdateListBuy(Stock s){
        new Stock().UpdateListBuySQL1(s); 
    }
    private void UpdateMoneySeller(Stock s){
        new Stock().UpdateMoneySeller(s);
    }
    private void UpdateMoneyBuyer(Stock s){
        new Stock().UpdateMoneyBuyer(s);
    }
    private void UpdateStock(Stock s){
        new Stock().UpdateStockSQL(s);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btn_BackHome;
    private java.awt.Button button1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.TextField txt_NameStock;
    private java.awt.TextField txt_Price;
    private java.awt.TextField txt_Quantity;
    // End of variables declaration//GEN-END:variables
}
